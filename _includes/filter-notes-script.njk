<script>
  // For the script to work, make sure the items container has the "filtered-list" class
  const allNotes = document.querySelectorAll(".filtered-list  >  *");
  const filterOneSelect = document.getElementById("filter-one-select");
  const filterTwoSelect = document.getElementById("filter-two-select");
  // remove no JS warning if javascript is enabled
  document.getElementById("notes-filter-js-warning").remove();

  // TODO clean up and simplify this script...

  /**
   * This function is called when a user changes the value of the select
   */
  function filterNotes(filterOne, filterTwo) {
    // Use filterOneSelect.value if nothing is specified when calling filterNotes()
    let filterOneValue = filterOneSelect.value;
    if (filterOne) {
      filterOneValue = filterOne;
    }

    // 1. Update URL onclick remove previous filter (hide all notes)
    allNotes.forEach((note) => (note.hidden = true));

    // Take into account "All" options
    let emptyFilterOne = false;
    if (filterOneValue === "") {
      emptyFilterOne = true;
    }

    /* 2. If there is only one filter */
    if (filterTwoSelect === null) {
      // 2a. Update URL on selection of filter 1
      updateURL(filterOneValue);

      allNotes.forEach((note) => {
        // 2b. Unhide notes that are tagged as the selected value of filter 1 (or no filter 1 selected)
        if (isInArray(note, "data-tag", filterOneValue) || emptyFilterOne) {
          note.hidden = false;
        }
      });
    } else {
      /* 3. If there are two filters */
      let filterTwoValue = filterTwoSelect.value;
      if (filterTwo) {
        filterTwoValue = filterTwo;
      }

      // 3a. Update URL on selection of filter 2
      updateURL(filterOneValue, filterTwoValue);

      // 3b. Take into account "All" options for 2nd filter
      let emptyFilterTwo = false;
      if (filterTwoValue === "") {
        emptyFilterTwo = true;
      }

      // 3c. Add hidden attributes to notes that don't have the chosen category in data-tag
      allNotes.forEach((note) => {
        // equals true if note includes filter 1
        const includesFilterOne = isInArray(note, "data-tag", filterOneValue);
        // equals true is note includes filter 2
        const includesFilterTwo = isInArray(
          note,
          "data-tag-two",
          filterTwoValue
        );

        // 3d. Unhide notes that are tagged as the selected value of filters 1 and 2
        if (
          // Following conditions respectively:
          // - Note has tags similar to selected filters 1 and 2
          // - Note has tag similar to selected filter 2 (no filter 1 selected)
          // - Note has tag similar to selected filter 1 (no filter 2 selected)
          // - No filter 1 or 2 selected
          (includesFilterOne && includesFilterTwo) ||
          (emptyFilterOne && includesFilterTwo) ||
          (includesFilterOne && emptyFilterTwo) ||
          (emptyFilterOne && emptyFilterTwo)
        ) {
          note.hidden = false;
        }
      });
    }
  }

  // returns true if the 'array' selected under 'attribute' contains the 'value'
  function isInArray(array, attribute, value) {
    return array.getAttribute(attribute).split(",").includes(value);
  }

  // 1. Get current URL
  let currentUrl = new URL(window.location.href);
  const searchParams = new URLSearchParams(currentUrl.search);

  // 2a. If there are filters 1 and 2 in URL
  if (searchParams.get("r")) {
    // 3. Apply filters to open page with preselected filters in URL
    filterNotes(searchParams.get("q"), searchParams.get("r"));
    // 4. Set selector values
    filterOneSelect.value = ""; // Makes sure "All" is selected by default and not empty
    if (searchParams.get("q")) {
      filterOneSelect.value = searchParams.get("q");
    }
    filterTwoSelect.value = searchParams.get("r");
    // 2b. If there is only filter 1 in URL
  } else if (searchParams.get("q")) {
    filterNotes(searchParams.get("q"));
    filterOneSelect.value = searchParams.get("q");
  }

  // Align selected filters with written URL
  function updateURL(filterOne, filterTwo) {
    currentUrl.searchParams.delete("q");
    currentUrl.searchParams.delete("r");
    currentUrl.searchParams.set("q", filterOne);
    if (filterTwo) {
      currentUrl.searchParams.set("r", filterTwo);
    }
    history.pushState({}, "", currentUrl);
  }
</script>
